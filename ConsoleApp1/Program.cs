using System;
using ECB_src;
using System.Data;
using System.Threading;
using System.Reflection.Emit;
using System.Xml.Linq;
using System.Data.SqlTypes;
using System;
using System.IO;
using System.Text;
using CsvHelper;
using InfluxDB.Client.Api.Domain;
using System.Diagnostics;

/// <summary>
/// 將DataTable中數據寫入到CSV文件中
/// </summary>
/// <param name="dt">提供保存數據的DataTable</param>
/// <param name="fileName">CSV的文件路徑</param>

namespace ConsoleApp1
{
    internal class Program
    {
        public static string run_cmd(string python, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = python;
            start.Arguments = string.Format("\"{0}\"", cmd);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }

        static bool SaveCSV(DataTable dt, string fullPath)
        {
            try
            {
                FileInfo fi = new FileInfo(fullPath);
                if (!fi.Directory.Exists)
                {
                    fi.Directory.Create();
                }
                FileStream fs = new FileStream(fullPath, System.IO.FileMode.Create, System.IO.FileAccess.Write);
                //StreamWriter sw = new StreamWriter(fs, System.Text.Encoding.Default);
                StreamWriter sw = new StreamWriter(fs, System.Text.Encoding.UTF8);
                string data = "";
                //寫出列名稱
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    data += "\"" + dt.Columns[i].ColumnName.ToString() + "\"";
                    if (i < dt.Columns.Count - 1)
                    {
                        data += ",";
                    }
                }
                sw.WriteLine(data);
                //寫出各行數據
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    data = "";
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        string str = dt.Rows[i][j].ToString();
                        str = string.Format("\"{0}\"", str);
                        data += str;
                        if (j < dt.Columns.Count - 1)
                        {
                            data += ",";
                        }
                    }
                    sw.WriteLine(data);
                }
                sw.Close();
                fs.Close();
                return true;
            }
            catch
            {
                return false;
            }
        }
        static void Main(string[] args) 
        {
            DataTable dt = new DataTable("Data_final");
            dt.Columns.Add("Temperature", typeof(double));
            dt.Columns.Add("Move", typeof(double));
            int move=0;

            //只有String 才要設定長度
            //StudentID
            //dt.Columns["Temperature"].MaxLength = 10;//長度
            //dt.Columns["Temperature"].AllowDBNull = false;//不能空值
                                                  
            //dt.Columns["Move"].MaxLength = 10;
            //dt.Columns["Move"].AllowDBNull = false;
            DataRow row;
            ECB ecb;
            object[] moduleObj;

            ecb = new ECB();  //初始化ecb
            ecb.Message += (s, a) => Console.WriteLine("ECB: ", a.Message);  //開另一個執行緒 非同步執行 

            var ecbTask = ecb.RunAsync(); //初始化網卡連線, var暫時的變數 無型態

            while (!ecb.isConnected)          //開始判斷是否連線成功
            {
                if(ecbTask.IsCompleted) {
                    break;
                }
            }

            var check = ecb.Connect();
            Console.WriteLine(check);
            moduleObj = ecb.GetModule();

            EcbModule_TC tc = (EcbModule_TC)moduleObj[2];

            //設擷取卡參數
            tc.SetFs(10);    //擷取頻率10Hz
            tc.RemoveInput();   //清空先前的連接與輸入
            tc.AddInput(0, EcbModule_TC.InputTypes.E);    //設定所需channel
            tc.SetPreTrigger(0);   //預觸發,  若SetPreTrigger(10):將擷取前10筆數據也輸入

            //開始擷取
            double[] Data_final = new double[10];

            for (int k = 0; k < 10; k++)
            {
                ecb.StartAcq();
                Thread.Sleep(7000);     //執行緒停止7秒，但擷取不會停止
                ecb.StopAcq();

                var TC_data = tc.GetRecData();
                //Console.WriteLine(TC_data.GetLength(0));
                double data_total = 0;
                double data_final = 0;

                for (int i = 0; i < TC_data.GetLength(0); i++)
                {
                    for (int j = 0; j < TC_data.GetLength(1); j++)
                    {
                        data_total = data_total + TC_data[i, j];
                        //Console.Write(TC_data[i, j]+", ");
                    }
                }
                data_final = data_total / 30;
                data_final = Math.Round(data_final, 3, MidpointRounding.AwayFromZero);
                Console.WriteLine(data_final);
                Data_final[k]=data_final;
            }
            
            for (int k = 0; k < 10; k++)
            {
                row = dt.NewRow();
                row["Temperature"] = Data_final[k];
                row["Move"] = move;
                dt.Rows.Add(row);
                Console.WriteLine(Data_final[k]);
            }
            SaveCSV(dt, "result.csv");
            string s=run_cmd(@"/usr/bin/python3", @"/run/media/Transcend-sda1/inference.py");
            Console.WriteLine(s);
        }
        
    }
}




